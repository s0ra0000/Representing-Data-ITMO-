Класс LinkedList

Конструктор LinkedList():

    Описание: Конструктор класса LinkedList создает новый экземпляр связанного списка. В начале создания список пуст, и начальный элемент head устанавливается в null.
    Действия:
        Создать новый объект класса LinkedList.
        Установить начальный элемент head в null.

Метод insert(Data x, Position p):

    Описание: Метод insert вставляет элемент x в указанную позицию p в списке.
    Входные параметры:
        x (тип Data): Элемент для вставки.
        p (тип Position): Позиция, на которую нужно вставить элемент.
    Действия:
        Создание Нового Узла:
        Первым шагом метода является создание нового узла (newNode) с данными x. Этот узел в дальнейшем будет вставлен в список.
        Проверка на Пустой Список:
        Затем метод проверяет, пуст ли список (т.е. head равно null).
        Если список пуст, метод устанавливает newNode в качестве головы списка (head) и завершает работу. Это обеспечивает корректную вставку в пустой список.
        Вставка в Конец Списка:
        Если список не пуст и позиция p не указана (или p.node равно null), это означает необходимость вставки в конец списка.
        В таком случае метод находит последний узел списка (с помощью метода getLast) и добавляет newNode в его конец. После этого метод завершает работу.
        Вставка в Начало Списка:
        Если позиция p указывает на начальный узел списка (head), это означает, что новый узел должен быть вставлен в начало списка.
        Метод делает newNode новой головой списка, при этом newNode будет указывать на старую голову. После этого метод завершает работу.
        Вставка в Середину Списка:
        В остальных случаях метод обрабатывает вставку узла в середину списка.
        Сначала метод определяет узел, который находится перед позицией p (с помощью метода getPrevious).
        Если предыдущий узел не найден (что указывает на неверную позицию p), метод завершает работу, не вставляя узел.
        Если же предыдущий узел найден, метод вставляет newNode между предыдущим узлом и узлом в позиции p. При этом newNode будет указывать на узел p, а предыдущий узел теперь будет указывать на newNode.

Метод first():

    Описание: Метод first возвращает позицию первого элемента в списке. Если список пуст, возвращается позиция после последнего элемента.
    Действия:
        Если список пуст (т.е., head равен null), вернуть позицию после последнего элемента.
        В противном случае вернуть позицию первого узла в списке.

Метод printlist():

    Описание: Метод printlist печатает все элементы списка
    Действия:
        Инициализировать переменную current как начальный элемент head списка.
        Пока current не станет равным null (достигнут конец списка), выполнить следующие действия:
        Вывести данные текущего элемента current на экран.
        Перейти к следующему элементу, обновив current.

Метод locate(Data x):

    Описание: Метод locate находит позицию элемента x в списке и возвращает ее в виде позиции с соответствующим индексом (1-based). Если элемент не найден, возвращается null.
    Входные параметры:
        x (тип Data): Элемент, позицию которого нужно найти в списке.
    Действия:
        Инициализировать переменную current как начальный элемент head списка.
        Пока current не станет равным null (достигнут конец списка), выполнить следующие действия:
        Проверить, равны ли данные текущего элемента current элементу x.
        Если данные совпадают, вернуть позицию текущего элемента.
        В противном случае, перейти к следующему элементу, обновив current.
        Если данные не найдены, вернуть null.

Метод retrieve(Position p):

    Описание: Метод retrieve получает позицию p и возвращает элемент Data. Если позиция p равна null выбрасывается исключение InvalidPositionException.
    Входные параметры:
        p (тип Position): Позиция, для которой нужно получить элемент.
    Действия:
        Проверить, равна ли позиция p null.
        Если проверка прошла успешно, вернуть данные элемента, на который указывает позиция p.
        В противном случае, выбросить исключение InvalidPositionException с сообщением "Invalid position: Position is END(L) or does not exist in the list."

Метод next(Position p):

    Описание: Метод next получает позицию p и возвращает позицию следующего элемента после позиции p в списке. Если позиция p равна null или указывает на последний элемент, возвращается позиция после последнего элемента (null).
    Входные параметры:
        p (тип Position): Позиция, для которой нужно получить следующую позицию.
    Действия:
        Проверить, равна ли позиция p null или указывает на последний элемент.
        Если позиция p равна последнему элементу, вернуть позицию после последнего элемента.
        В противном случае, вернуть позицию следующего элемента после позиции (p.node.next)

Метод previous(Position p):

    Описание: Метод previous получает позицию p и возвращает позицию предыдущего элемента перед позицией p в списке. Если позиция p равна первому элементу, указывает на начало списка (первый элемент), или не существует в списке, выбрасывается исключение InvalidPositionException.
    Входные параметры:
        p (тип Position): Позиция, для которой нужно получить предыдущую позицию.
    Действия:
        Проверить, равна ли позиция p первому элементу, указывает на начало списка или не существует в списке.
        Если проверка прошла успешно, вернуть позицию предыдущего элемента перед позицией p с помощью приватного метода getPrevious().
        В противном случае, выбросить исключение InvalidPositionException с сообщением "Invalid position: Position is first, END(L), or not in the list."

Метод delete(Position p):

    Описание: Метод delete удаляет элемент на позиции p из списка. Если позиция p равна null или не существует в списке, ничего не происходит.
    Входные параметры:
        p (тип Position): Позиция элемента, который нужно удалить.
    Действия:
        Проверка На Недопустимую Позицию или Пустой Список:
        Метод начинается с проверки условия, когда переданная позиция p является недопустимой (т.е. p равно null или p.node равно null) или когда список пуст (head равно null).
        Если любое из этих условий истинно, метод ничего не делает и просто возвращается. Это предотвращает ошибки или попытки удаления из пустого списка.
        Удаление Первого Узла Списка:
        Проверка, является ли узел, который нужно удалить, первым узлом в списке (head).
        Если это так, метод устанавливает head на следующий элемент после текущего head, тем самым удаляя первый узел из списка.
        После этого метод завершает свою работу.
        Общий Случай: Удаление Узла на Позиции p:
        В общем случае, когда удаляемый узел не является первым в списке, метод сначала находит позицию узла, который находится перед удаляемым узлом (getPrevious(p)).
        Если предыдущая позиция найдена (т.е. previousPosition.node не равно null), метод переходит к удалению узла.
        Узел, который следует за узлом в предыдущей позиции (previousPosition.node.next), устанавливается так, чтобы указывать на узел, следующий за удаляемым узлом.
        Позиция p обновляется, чтобы указывать на следующий узел после удаленного.
        Обработка Ненайденной Позиции:
        Если предыдущая позиция (previousPosition) не найдена (т.е. равна null), это означает, что удаляемый узел отсутствует в списке. В таком случае метод ничего не делает и просто возвращается.

Метод makenull():

    Описание: Метод makenull очищает список, устанавливая начальный элемент head в null.
    Действия:
        Установить начальный элемент head в null, очищая список.

Метод getLast():

    Описание: Приватный метод getLast используется для получения последнего элемента списка.
    Действия:
        Инициализировать переменную current как начальный элемент head списка.
        Пока current.next не станет равным null (достигнут конец списка), выполнить следующие действия:
        Присвоить current значение current.next (перейти к следующему элементу).
        Вернуть current как последний элемент списка.

Метод getPrevious(Position p):

    Описание: Приватный метод getPrevious используется для получения позиции предыдущего элемента перед указанной позицией p в списке.
    Входные параметры:
        p (тип Position): Позиция, для которой нужно получить предыдущую позицию.
    Действия:
        Проверить, равна ли позиция p начальному элементу head. Если это так, вернуть позицию с null-значением node.
        Инициализировать переменную current как начальный элемент head списка.
        Пока current не станет равным null и current.next не равен p.node (достижение позиции p), выполнить следующие действия:
        Присвоить current значение current.next (перейти к следующему элементу).
        Вернуть позицию с current в качестве node.